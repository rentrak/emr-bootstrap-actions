#!/usr/bin/ruby
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'json'
require 'net/http'

def run(cmd)
    puts cmd
    if ! system(cmd) then
      raise "Command failed: #{cmd}"
    end
end

def sudo(cmd)
   run("sudo #{cmd}")
end

def println(*args)
    print *args
    puts
end

security_endpoint = 'http://169.254.169.254/latest/meta-data/iam/security-credentials/'
req = Net::HTTP.get_response(URI(security_endpoint))
$has_roles = (req.code.to_i == 200) ? true : false

userdata_endpoint = 'http://169.254.169.254/latest/user-data'
instance_info = JSON.parse( Net::HTTP.get( URI.parse( userdata_endpoint ) ) )
is_master = instance_info['isMaster'].to_s == 'true'

job_flow = JSON.parse(File.read('/mnt/var/lib/info/job-flow.json'))
$zookeeper = job_flow['masterPrivateDnsName']

def cleanUp(targetDir,runDir,logDir)
    println "Cleaning up stale directories.. "
    println "\t#{targetDir}"
    sudo "rm -rf #{targetDir}"
    println "\t#{runDir} #{logDir}"
    sudo "rm -rf #{runDir} #{logDir}"
end


def writeDrillConfs(runDir,logDir)
    zookeeperConnect=$zookeeper
    File.open('/tmp/drill-override.conf', 'w') do |f|
    f.write(<<EOF
drill.exec: {
  cluster-id: "EMR-Drill"
  rpc: {
        user.port : 31010,
        bit.port : 32011
  },
  operator: {
    packages += "org.apache.drill.exec.physical.config"
  },
  optimizer: {
    implementation: "org.apache.drill.exec.opt.IdentityOptimizer"
  },
  storage: {
        packages += "org.apache.drill.exec.store"
  }
  metrics : {
        context: "drillbit"
  },
  zk: {
        connect: "#{zookeeperConnect}",
        root: "drill",
        refresh: 500,
        timeout: 5000,
        retry: {
          count: 7200,
          delay: 500
        }
  },
  network: {
    start: 35000
  }
}
EOF
)
end

    sudo "mv /tmp/drill-override.conf /usr/lib/drill/conf/drill-override.conf && chmod 644 /usr/lib/drill/conf/drill-override.conf"

    File.open('/tmp/drillbit', 'w') do |f| 
    f.write(<<EOF
/usr/lib/drill/bin/drillbit.sh $@
EOF
)
end
    sudo "mv /tmp/drillbit /etc/init.d/drillbit && chmod a+x /etc/init.d/drillbit"

    File.open('/tmp/drill-init-config.sh', 'w') do |f|
    f.write(<<EOF
export DRILL_HOME=/usr/lib/drill
export DRILL_LOG_DIR=/mnt/var/log/drill
export DRILL_PID_DIR=/mnt/var/run/drill
export DRILL_MAX_DIRECT_MEMORY=4096M
EOF
)
end
    sudo "mv /tmp/drill-init-config.sh /usr/lib/drill/conf/drill-env.sh"

    if $has_roles then
    
        File.open('/tmp/core-site.xml', 'w') do |f|
            f.write(<<EOF
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
  <property>
    <name>fs.s3a.aws.credentials.provider</name>
    <value>com.amazonaws.auth.DefaultAWSCredentialsProviderChain</value>
  </property>
</configuration>
EOF
)
end

        sudo "mv /tmp/core-site.xml /usr/lib/drill/conf/site-core.xml"

    end
    
    File.open('/tmp/drill.conf', 'w') do |f| 
    f.write(<<EOF
[

{
  "name": "run-drill",
  "type": "file",
  "file": "#{runDir}/run-drill",
  "pattern": "1"
},

{
  "name": "drill-bit",
  "type": "process",
  "start": "/etc/init.d/drillbit start",
  "stop": "/etc/init.d/drillbit stop",
  "pid-file": "#{runDir}/drillbit.pid",
  "pattern": "org.apache.drill.exec.server.Drillbit",
  "depends": ["run-drill"]
}
]
EOF
)
end

    sudo "mv /tmp/drill.conf /etc/service-nanny/drill.conf"
    sudo "echo '1' >/mnt/var/run/drill/run-drill"

end


def installDrill(targetDir, runDir, logDir)
    drillTarGZUrl="http://apache.osuosl.org/drill/drill-1.9.0"
    drillTarGZ="apache-drill-1.9.0.tar.gz"
    drillRoot="apache-drill-1.9.0"

    println "Going to download Apache Drill distribution #{drillTarGZ} from #{drillTarGZUrl}"
    sudo "curl -L --silent --show-error --fail --connect-timeout 60 --max-time 720 --retry 5 -O #{drillTarGZUrl}/#{drillTarGZ}"

    println "Installing Apache Drill..."
    sudo "tar -xzf #{drillTarGZ}"
    sudo "rm -f #{drillTarGZ}"
    sudo "mv #{drillRoot} #{targetDir}"
    sudo "chown -R root.root #{targetDir}"

    println "Configuring Apache Drill..."
    sudo "mkdir -p #{runDir}"
    sudo "mkdir -p #{logDir}"
    sudo "chown -R hadoop.hadoop #{runDir}"
    sudo "chown -R hadoop.hadoop #{logDir}"

    writeDrillConfs($runDir,$logDir)

    sudo "chown -R hadoop.hadoop #{runDir}"
    sudo "chown -R hadoop.hadoop #{logDir}"

    sudo "/etc/init.d/service-nanny start"
    sudo "/etc/init.d/service-nanny restart"
end

$targetDir="/usr/lib/drill"
$runDir="/mnt/var/run/drill"
$logDir="/mnt/var/log/drill"

cleanUp($targetDir, $runDir, $logDir)
installDrill($targetDir, $runDir, $logDir)
